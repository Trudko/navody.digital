require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::JourneysController, type: :controller do
  include AdminAuthHelper

  before(:each) do
    admin_http_login
  end

  # This should return the minimal set of attributes required to create a valid
  # Journey. As you add validations to Journey, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    build(:journey).attributes
  }

  let(:invalid_attributes) {
    build(:journey, title: '').attributes
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Admin::JourneysController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      Journey.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      journey = Journey.create! valid_attributes
      get :edit, params: { id: journey.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Journey" do
        expect {
          post :create, params: { journey: valid_attributes }, session: valid_session
        }.to change(Journey, :count).by(1)
      end

      it "redirects to the journeys" do
        post :create, params: { journey: valid_attributes }, session: valid_session
        expect(response).to redirect_to([:admin, :journeys])
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { journey: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
            title: 'Foo bar'
        }
      }

      it "updates the requested journey" do
        journey = Journey.create! valid_attributes
        put :update, params: { id: journey.to_param, journey: new_attributes }, session: valid_session
        journey.reload
        expect(journey.title).to eq new_attributes[:title]
      end

      it "redirects to the journey" do
        journey = Journey.create! valid_attributes
        put :update, params: { id: journey.to_param, journey: valid_attributes }, session: valid_session
        expect(response).to redirect_to([:admin, :journeys])
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        journey = Journey.create! valid_attributes
        put :update, params: { id: journey.to_param, journey: invalid_attributes }, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "POST #reposition" do
    it "updates positions" do
      journey = Journey.create! valid_attributes
      step1 = create(:step, journey_id: journey.id, position: 0)
      step2 = create(:step, journey_id: journey.id, position: 1)
      step3 = create(:step, journey_id: journey.id, position: 1) #same position as step2, but higher id
      expect {
        post :reposition, params: {id: journey.to_param, journey: valid_attributes}, session: valid_session
        step1.reload
        step2.reload
        step3.reload
      }.to change(step1, :position).to(1).and change(step2, :position).to(2).and change(step3, :position).to(3)
    end

    it "doest not change position when same as expected" do
      journey = Journey.create! valid_attributes
      step1 = create(:step, journey_id: journey.id, position: 1)
      expect {
        post :reposition, params: {id: journey.to_param, journey: valid_attributes}, session: valid_session
        step1.reload
      }.not_to change(step1, :position)
    end
  end

  describe "DELETE #destroy" do
    it "does not destroy published journeys" do
      journey = create(:journey, published_status: 'PUBLISHED')
      expect {
        delete :destroy, params: { id: journey.to_param }, session: valid_session
      }.not_to change(Journey, :count)
    end

    it "does not destroy journeys with associated UserJourneys" do
      journey = create(:journey, published_status: 'DRAFT')
      create(:user_journey, journey: journey, user: create(:user))

      expect {
        delete :destroy, params: { id: journey.to_param }, session: valid_session
      }.not_to change(Journey, :count)
    end

    it "destroys unpublished journey" do
      journey = create(:journey, published_status: 'DRAFT')
      expect {
        delete :destroy, params: { id: journey.to_param }, session: valid_session
      }.to change(Journey, :count).by(-1)
    end

    it "redirects to the journeys list" do
      journey = Journey.create! valid_attributes
      delete :destroy, params: { id: journey.to_param }, session: valid_session
      expect(response).to redirect_to(admin_journeys_url)
    end
  end

end
